var _etaque$elm_transit$Transit$delay = F2(
	function (time, task) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return task;
			},
			_elm_lang$core$Process$sleep(time));
	});
var _etaque$elm_transit$Transit$getStep = function (_p1) {
	var _p2 = _p1;
	return _p2._0.step;
};
var _etaque$elm_transit$Transit$getValue = function (_p3) {
	var _p4 = _p3;
	return _p4._0.value;
};
var _etaque$elm_transit$Transit$getState = function (transition) {
	var _p5 = transition;
	return _p5._0;
};
var _etaque$elm_transit$Transit$State = F4(
	function (a, b, c, d) {
		return {step: a, start: b, value: c, durations: d};
	});
var _etaque$elm_transit$Transit$T = function (a) {
	return {ctor: 'T', _0: a};
};
var _etaque$elm_transit$Transit$Done = {ctor: 'Done'};
var _etaque$elm_transit$Transit$initialState = {
	step: _etaque$elm_transit$Transit$Done,
	start: 0,
	value: 1,
	durations: {ctor: '_Tuple2', _0: 0, _1: 0}
};
var _etaque$elm_transit$Transit$empty = _etaque$elm_transit$Transit$T(_etaque$elm_transit$Transit$initialState);
var _etaque$elm_transit$Transit$Enter = {ctor: 'Enter'};
var _etaque$elm_transit$Transit$Exit = {ctor: 'Exit'};
var _etaque$elm_transit$Transit$EmitMsg = F2(
	function (a, b) {
		return {ctor: 'EmitMsg', _0: a, _1: b};
	});
var _etaque$elm_transit$Transit$tick = F3(
	function (tagger, msg, parent) {
		var tag = function (_p6) {
			var _p7 = _p6;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					parent,
					{
						transition: _etaque$elm_transit$Transit$T(_p7._0)
					}),
				_1: A2(_elm_lang$core$Platform_Cmd$map, tagger, _p7._1)
			};
		};
		var state = _etaque$elm_transit$Transit$getState(parent.transition);
		var _p8 = msg;
		switch (_p8.ctor) {
			case 'Start':
				var _p9 = _p8._1;
				var emitTask = _elm_lang$core$Task$succeed(
					A2(_etaque$elm_transit$Transit$EmitMsg, _p8._0, _p9));
				var emitCmd = A2(
					_elm_lang$core$Task$perform,
					_elm_lang$core$Basics$identity,
					A2(
						_etaque$elm_transit$Transit$delay,
						_elm_lang$core$Tuple$first(state.durations),
						emitTask));
				return tag(
					{
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							state,
							{step: _etaque$elm_transit$Transit$Exit, start: _p9}),
						_1: emitCmd
					});
			case 'EmitMsg':
				return (_elm_lang$core$Native_Utils.cmp(_p8._1, state.start) > -1) ? {
					ctor: '_Tuple2',
					_0: parent,
					_1: A2(
						_elm_lang$core$Task$perform,
						_elm_lang$core$Basics$identity,
						_elm_lang$core$Task$succeed(_p8._0))
				} : {ctor: '_Tuple2', _0: parent, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				var _p11 = _p8._0;
				var _p10 = state.step;
				switch (_p10.ctor) {
					case 'Exit':
						return (_elm_lang$core$Native_Utils.cmp(
							_p11,
							state.start + _elm_lang$core$Tuple$first(state.durations)) < 0) ? tag(
							{
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									state,
									{
										step: _etaque$elm_transit$Transit$Exit,
										value: 1 - ((_p11 - state.start) / _elm_lang$core$Tuple$first(state.durations))
									}),
								_1: _elm_lang$core$Platform_Cmd$none
							}) : tag(
							{
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									state,
									{step: _etaque$elm_transit$Transit$Enter, value: 0}),
								_1: _elm_lang$core$Platform_Cmd$none
							});
					case 'Enter':
						return (_elm_lang$core$Native_Utils.cmp(
							_p11,
							(state.start + _elm_lang$core$Tuple$first(state.durations)) + _elm_lang$core$Tuple$second(state.durations)) < 0) ? tag(
							{
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									state,
									{
										value: ((_p11 - state.start) - _elm_lang$core$Tuple$first(state.durations)) / _elm_lang$core$Tuple$second(state.durations)
									}),
								_1: _elm_lang$core$Platform_Cmd$none
							}) : tag(
							{
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									state,
									{step: _etaque$elm_transit$Transit$Done, value: 1}),
								_1: _elm_lang$core$Platform_Cmd$none
							});
					default:
						return {ctor: '_Tuple2', _0: parent, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _etaque$elm_transit$Transit$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _etaque$elm_transit$Transit$subscriptions = F2(
	function (tagger, parent) {
		var _p12 = _etaque$elm_transit$Transit$getStep(parent.transition);
		if (_p12.ctor === 'Done') {
			return _elm_lang$core$Platform_Sub$none;
		} else {
			return _elm_lang$animation_frame$AnimationFrame$times(
				function (_p13) {
					return tagger(
						_etaque$elm_transit$Transit$Tick(_p13));
				});
		}
	});
var _etaque$elm_transit$Transit$Start = F2(
	function (a, b) {
		return {ctor: 'Start', _0: a, _1: b};
	});
var _etaque$elm_transit$Transit$start = F4(
	function (tagger, parentMsg, durations, parent) {
		var cmd = A2(
			_elm_lang$core$Platform_Cmd$map,
			tagger,
			A2(
				_elm_lang$core$Task$perform,
				_etaque$elm_transit$Transit$Start(parentMsg),
				_elm_lang$core$Time$now));
		var state = _etaque$elm_transit$Transit$getState(parent.transition);
		var newState = _elm_lang$core$Native_Utils.update(
			state,
			{durations: durations});
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				parent,
				{
					transition: _etaque$elm_transit$Transit$T(newState)
				}),
			_1: cmd
		};
	});
